use crate::{
    Arc,
    ParseState,
};
use crate::syntax::{
    *,
    ExprValue::{
        Op1,
        Op2,
        And,
        Or,
        Call,
        Assign,
        List,
        This,
    },
};

grammar(state: &mut ParseState);

extern {
    type Error = Error;
}

match {
    r"\s+" => {},
    r"#[^\r\n]*" => {},
} else { _ }

#[inline]
V<E>: Arc<ExprValue> = E => Arc::new(<>.into());
#[inline]
A<E>: Expr = <l:@L> <v:E> <r:@R> => Expr::new(v, (l, r));
#[inline]
E<E>: Expr = <l:@L> <v:E> <r:@R> => {
    #![allow(clippy::useless_conversion)]
    Expr::new(Arc::new(v.into()), (l, r))
};
#[inline]
Sep<E, S>: Vec<E> = <mut acc:(<E> S)*> <tail:E> => {
    acc.push(tail);
    acc
};
UnpackA<T>: Arc<ExprValue> = T => <>.value;
Cat<A, T>: A = <mut a:A> <t:T> => { a.push(t); a };
Ext<A, B>: A = <mut a:A> <b:B> => { a.extend(b); a };
Tac<T, A>: A = <t:T> <mut a:A> => { a.insert(0, t); a };

Expr: Expr = A<Or<Add>>;
Cond: Expr = A<Or<UnpackA<Atom>>>;
pub Pipe: Expr = E<Atom+>;
EPipe: Expr = E<Sep<Expr, ";">>;

Or<T>: Arc<ExprValue> = {
    <A<Or<T>>> "||" <A<And<T>>> => Or(<>).into(),
    And<T>,
}
And<T>: Arc<ExprValue> = {
    <A<And<T>>> "&&" <A<Eq<T>>> => And(<>).into(),
    Eq<T>,
}
Eq<T>: Arc<ExprValue> = {
    <A<Cmp<T>>> "==" <A<Cmp<T>>> => Op2(BinaryOp::Eq, <>).into(),
    <A<Cmp<T>>> "!=" <A<Cmp<T>>> => Op2(BinaryOp::Ne, <>).into(),
    Cmp<T>,
}
Cmp<T>: Arc<ExprValue> = {
    <A<T>> "<" <A<T>> => Op2(BinaryOp::Lt, <>).into(),
    <A<T>> ">" <A<T>> => Op2(BinaryOp::Gt, <>).into(),
    <A<T>> "<=" <A<T>> => Op2(BinaryOp::Le, <>).into(),
    <A<T>> ">=" <A<T>> => Op2(BinaryOp::Ge, <>).into(),
    T,
}
Add: Arc<ExprValue> = {
    <A<Add>> "+" <A<Mul>> => Op2(BinaryOp::Add, <>).into(),
    <A<Add>> "-" <A<Mul>> => Op2(BinaryOp::Sub, <>).into(),
    Mul,
}
Mul: Arc<ExprValue> = {
    <A<Mul>> "*" <A<EIf>> => Op2(BinaryOp::Mul, <>).into(),
    <A<Mul>> "/" <A<EIf>> => Op2(BinaryOp::Div, <>).into(),
    <A<Mul>> "%" <A<EIf>> => Op2(BinaryOp::Rem, <>).into(),
    <A<Mul>> "//" <A<EIf>> => Op2(BinaryOp::IDiv, <>).into(),
    EIf,
}
EIf: Arc<ExprValue> = {
    V<IfElseIf<A<EIfV>, A<EIf>>>,
    V<IfOnly<A<EIfV>, A<EIf>>>,
    EIfV,
}
EIfV: Arc<ExprValue> = {
    V<IfElse<A<EIfV>, A<EIf>>>,
    Neg<EDotCall>,
}
Neg<T>: Arc<ExprValue> = {
    AtomOps<A<Neg<T>>>,
    T,
}
EDotCall: Arc<ExprValue> = {
    ComCall<A<EAtom>, A<Neg<EAtom>>>,
    EAtom,
}
EAtom: Arc<ExprValue> = {
    UnpackA<AtomT>,
}

pub Atom: Expr = {
    AtomV,
    E<IfElseIf<AtomV, Atom>>,
    E<IfOnly<AtomV, Atom>>,
}
AtomV: Expr = {
    E<IfElse<AtomV, Atom>>,
    A<AtomOps<AtomV>>,
    A<ComCall<AtomT, AtomT>>,
    AtomT,
}
AtomT: Expr = {
    "(" <Pipe> ")",
    "{" <EPipe> "}",
    "[" <A<List<Expr>>> "]",
    E<Literal>,
    E<Ident>,
    "." => todo!(),
}
AtomOps<V>: Arc<ExprValue> = {
    "-" <V> => Op1(SingleOp::Neg, <>).into(),
    "!" <V> => Op1(SingleOp::Not, <>).into(),
    <Ident> "=" <V> => Assign(<>).into(),
}
ComCall<F, P>: Arc<ExprValue> = {
    <f:A<Call<F>>> <p:A<ComCallParam<P>>> => {
        Arc::new(vec![p, f].into())
    },
}
Ident: Ident = {
    r"\p{xid_start}[_\p{xid_continue}]*|_[_\p{xid_continue}]+" => {
        state.ident(<>)
    },
}
Literal: Literal = {
    r"[0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?" => {
        <>.parse::<f64>().unwrap().into()
    },
    String,
}
String: Literal = {
    r"'[^']*'" => <>[1..<>.len()-1].into(),
    r"''''''" => "".into(),
    r"'''[^\n\r](?:'?'?[^'])*'''" => <>[3..<>.len()-3].into(),
    r"'''\n(?:'?'?[^'])*'''" => <>[4..<>.len()-3].into(),
    r"'''\r\n(?:'?'?[^'])*'''" => <>[5..<>.len()-3].into(),
    r#""([^"\\]|\\([\\nrbte"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}))""# =>? {
        Literal::escape(&<>[1..<>.len()-1]).map_err(Into::into)
    }
}
This<T>: Arc<ExprValue> = T => This.into();
Call<T>: Arc<ExprValue> = T => Call(<>).into();
ComCallParam<P>: Arc<ExprValue> = Tac<A<This<()>>, ("," <P>)+> => List(<>).into();
List<T>: Arc<ExprValue> = Ext<(<T> ";")*, T?> => List(<>).into();
IfElse<V, A>: If = "if" <cond:Cond> <yes:V> "else" <no:V> => {
    If::new(cond, yes, no.into())
};
IfElseIf<V, A>: If = "if" <cond:Cond> <yes:V> "else" <no:E<IfOnly<V, A>>> => {
    If::new(cond, yes, no.into())
};
IfOnly<V, A>: If = "if" <cond:Cond> <yes:A> => {
    If::new(cond, yes, None)
};
